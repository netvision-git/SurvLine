using Microsoft.VisualBasic.Logging;
using SurvLine.mdl;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using static SurvLine.mdl.MdlUtility;
using Microsoft.VisualBasic;

namespace SurvLine
{
    internal class StringTokenizer
    {
        //==========================================================================================
        /*[VB]
        '*******************************************************************************
        'StringTokenizer

        Option Explicit
        [VB]*/
        //------------------------------------------------------------------------------------------
        //[C#]
        //==========================================================================================

        //==========================================================================================
        /*[VB]
        'プロパティ
        Public Source As String '文字列。
        Public Delimiter As String 'デリミタ。
        [VB]*/
        //------------------------------------------------------------------------------------------
        //[C#]
        //'プロパティ
        public string Source;       //'文字列。
        public string Delimiter;    //'デリミタ。
        //==========================================================================================

        //==========================================================================================
        /*[VB]
        'インプリメンテーション
        Private m_nPos As Long '位置。
        Private m_nLen As Long 'デリミタの長さ。
        [VB]*/
        //------------------------------------------------------------------------------------------
        //[C#]
        //'インプリメンテーション
        private long m_nPos;        //'位置。
        private long m_nLen;        //'デリミタの長さ。
        //==========================================================================================

        //==========================================================================================
        /*[VB]
        '*******************************************************************************
        'イベント

        '初期化。
        Private Sub Class_Initialize()
            Delimiter = ","
        End Sub
        [VB]*/
        //------------------------------------------------------------------------------------------
        //[C#]
        /*
        '*******************************************************************************
        'イベント

        '初期化。
        */

        public StringTokenizer()
        {
            Class_Initialize();
        }

        private void Class_Initialize()
        {
            Delimiter = ",";
        }
        //==========================================================================================

        //==========================================================================================
        /*[VB]
        '*******************************************************************************
        'メソッド

        '開始。
        Public Sub Begin()
            m_nPos = 1
            m_nLen = Len(Delimiter)
        End Sub
        [VB]*/
        //------------------------------------------------------------------------------------------
        //[C#]
        /*
        '*******************************************************************************
        'メソッド

        '開始。
        */
        public void Begin()
        {
            m_nPos = 1;
            m_nLen = Delimiter.Length;
        }
        //==========================================================================================

        //==========================================================================================
        /*[VB]
        '次のトークン。
        '
        '戻り値：
        '次のトークンが有る場合はそのトークンを返す。
        '次のトークンが無い場合は空文字を返す。
        Public Function NextToken() As String
            If m_nPos < 1 Then
                NextToken = ""
            Else
                Dim nFind As Long
                nFind = InStr(m_nPos, Source, Delimiter)
                If nFind > 0 Then
                    NextToken = Mid$(Source, m_nPos, nFind - m_nPos)
                    m_nPos = nFind + m_nLen
                Else
                    NextToken = Mid$(Source, m_nPos)
                    m_nPos = 0
                End If
            End If
        End Function
        [VB]*/
        //------------------------------------------------------------------------------------------
        //[C#]
        /*
        '次のトークン。
        '
        '戻り値：
        '次のトークンが有る場合はそのトークンを返す。
        '次のトークンが無い場合は空文字を返す。
        */
        public string NextToken()
        {
            string w_NextToken;
            if (m_nPos < 1)
            {
                w_NextToken = "";
            }
            else
            {
                long nFind;
                nFind = Strings.InStr((int)m_nPos, Source, Delimiter);
                if (nFind > 0)
                {
                    w_NextToken = Mid(Source, (int)m_nPos, (int)(nFind - m_nPos));
                    m_nPos = nFind + m_nLen;
                }
                else
                {
                    w_NextToken = Mid(Source, (int)m_nPos, 99);
                    m_nPos = 0;
                }
            }
            return w_NextToken;
        }
        //==========================================================================================
    }
}
